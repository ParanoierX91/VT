# PowerShell script to scan file or URL with VirusTotal
param (
    [string]$target,          # File path or URL to scan
    [string]$apiKey = "0748e2d02ac21d3b6d46ebd06448f403d4969dfb71cfbc1a5ebe34131be2d414"  # Replace with your VirusTotal API key
)

# Function to check if the target is a URL
function Is-Url($string) {
    return ($string -match "^(http|https)://")
}

# Function to get file hash
function Get-FileHashSHA256($filePath) {
    if (Test-Path $filePath) {
        $hash = Get-FileHash -Path $filePath -Algorithm SHA256
        return $hash.Hash
    } else {
        Write-Error "File not found: $filePath"
        exit 1
    }
}

# Main execution
try {
    # Validate input
    if (-not $target) {
        Write-Error "Please provide a file path or URL to scan using -target parameter"
        exit 1
    }
    
    if (-not $apiKey -or $apiKey -eq "YOUR_VIRUSTOTAL_API_KEY") {
        Write-Error "Please provide a valid VirusTotal API key"
        exit 1
    }

    # VirusTotal API endpoints
    $baseUri = "https://www.virustotal.com/api/v3"
    $headers = @{
        "x-apikey" = $apiKey
        "Accept" = "application/json"
    }

    if (Is-Url $target) {
        # URL scanning
        $body = @{
            "url" = $target
        }
        $response = Invoke-RestMethod -Uri "$baseUri/urls" -Method Post -Headers $headers -Body ($body | ConvertTo-Json) -ContentType "application/json"
        
        # Get analysis results
        $analysisId = $response.data.id
        $analysisUri = "$baseUri/analyses/$analysisId"
        Start-Sleep -Seconds 5  # Wait for analysis to complete
        $results = Invoke-RestMethod -Uri $analysisUri -Method Get -Headers $headers
        
    } else {
        # File scanning - first get the file hash
        $fileHash = Get-FileHashSHA256 $target
        $scanUri = "$baseUri/files/$fileHash"
        
        # Check if file already has a report
        $results = Invoke-RestMethod -Uri $scanUri -Method Get -Headers $headers
    }

    # Process and display results
    $stats = $results.data.attributes.last_analysis_stats
    Write-Host "VirusTotal Scan Results for: $target" -ForegroundColor Cyan
    Write-Host "--------------------------------"
    Write-Host "Malicious: $($stats.malicious)" -ForegroundColor Red
    Write-Host "Suspicious: $($stats.suspicious)" -ForegroundColor Yellow
    Write-Host "Undetected: $($stats.undetected)"
    Write-Host "Harmless: $($stats.harmless)" -ForegroundColor Green
    
    # Detailed results from each engine
    Write-Host "`nDetailed Scan Results:" -ForegroundColor Cyan
    $results.data.attributes.last_analysis_results | ForEach-Object {
        $engine = $_.PSObject.Properties.Name
        $result = $_.PSObject.Properties.Value.result
        if ($result -eq "malicious") {
            Write-Host "$engine : $result" -ForegroundColor Red
        } elseif ($result -eq "suspicious") {
            Write-Host "$engine : $result" -ForegroundColor Yellow
        }
    }

} catch {
    Write-Error "Error occurred: $($_.Exception.Message)"
    exit 1
}
